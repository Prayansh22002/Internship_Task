-- Create the Food Booking Application database
CREATE DATABASE FoodBookingApp;

-- Use the database
USE FoodBookingApp;

-- Create the Restaurants table
CREATE TABLE Restaurants (
    RestaurantID INT PRIMARY KEY,
    Name VARCHAR(100) NOT NULL,
    City VARCHAR(50) NOT NULL,
    CuisineType VARCHAR(50) NOT NULL,
    Rating DECIMAL(2, 1) NOT NULL,
    AverageCostForTwo DECIMAL(10, 2) NOT NULL
);

-- Create the Customers table
CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    FirstName VARCHAR(50) NOT NULL,
    LastName VARCHAR(50) NOT NULL,
    Phone VARCHAR(15) UNIQUE NOT NULL,
    City VARCHAR(50) NOT NULL,
    JoinDate DATE NOT NULL
);

CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    CustomerID INT NOT NULL,
    RestaurantID INT NOT NULL,
    OrderDate DATE NOT NULL,
    OrderAmount DECIMAL(10, 2) NOT NULL,
    OrderStatus VARCHAR(20) NOT NULL CHECK (OrderStatus IN ('Delivered', 'Cancelled', 'Pending')),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    FOREIGN KEY (RestaurantID) REFERENCES Restaurants(RestaurantID)
);

-- Create the Reviews table
CREATE TABLE Reviews (
    ReviewID INT PRIMARY KEY,
    CustomerID INT NOT NULL,
    RestaurantID INT NOT NULL,
    Rating DECIMAL(2, 1) NOT NULL,
    Comment TEXT,
    ReviewDate DATE NOT NULL,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    FOREIGN KEY (RestaurantID) REFERENCES Restaurants(RestaurantID)
);

-- Create the Payments table
CREATE TABLE Payments (
    PaymentID INT PRIMARY KEY,
    OrderID INT NOT NULL,
    PaymentMethod VARCHAR(20) NOT NULL CHECK (PaymentMethod IN ('Card', 'Cash', 'Wallet')),
    Amount DECIMAL(10, 2) NOT NULL,
    PaymentDate DATE NOT NULL,
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID)
);

-- Insert sample data into Restaurants
INSERT INTO Restaurants (RestaurantID, Name, City, CuisineType, Rating, AverageCostForTwo) VALUES
(1, 'Taste of Italy', 'Mumbai', 'Italian', 4.7, 1500),
(2, 'Dragon Bowl', 'Delhi', 'Chinese', 4.5, 1200),
(3, 'Spice Symphony', 'Mumbai', 'Indian', 4.2, 1000),
(4, 'Pizza Paradise', 'Bangalore', 'Italian', 4.8, 1300),
(5, 'Sushi World', 'Kolkata', 'Japanese', 4.3, 2000);

-- Insert sample data into Customers
INSERT INTO Customers (CustomerID, FirstName, LastName, Phone, City, JoinDate) VALUES
(1, 'John', 'Doe', '9876543210', 'Mumbai', '2023-01-15'),
(2, 'Jane', 'Smith', '8765432109', 'Delhi', '2023-02-10'),
(3, 'Emily', 'Jones', '7654321098', 'Mumbai', '2023-03-05'),
(4, 'Michael', 'Brown', '6543210987', 'Bangalore', '2023-04-20');

-- Insert sample data into Orders
INSERT INTO Orders (OrderID, CustomerID, RestaurantID, OrderDate, OrderAmount, OrderStatus) VALUES
(1, 1, 1, '2023-05-01', 1500, 'Delivered'),
(2, 2, 2, '2023-05-03', 1200, 'Cancelled'),
(3, 3, 1, '2023-05-05', 1500, 'Delivered'),
(4, 4, 4, '2023-05-07', 1300, 'Pending');

-- Insert sample data into Reviews
INSERT INTO Reviews (ReviewID, CustomerID, RestaurantID, Rating, Comment, ReviewDate) VALUES
(1, 1, 1, 5.0, 'Amazing food!', '2023-05-02'),
(2, 2, 2, 4.5, 'Great service.', '2023-05-04'),
(3, 3, 1, 4.8, 'Loved the ambiance.', '2023-05-06'),
(4, 4, 4, 4.9, 'Perfect pizza!', '2023-05-08');

-- Insert sample data into Payments
INSERT INTO Payments (PaymentID, OrderID, PaymentMethod, Amount, PaymentDate) VALUES
(1, 1, 'Card', 1500, '2023-05-01'),
(2, 3, 'Wallet', 1500, '2023-05-05');

-- Query 1: Retrieve the names and locations of restaurants with a rating of 4.5 or higher
SELECT Name, City FROM Restaurants WHERE Rating >= 4.5;

-- Query 2: Find the total number of orders placed by each customer
SELECT c.FirstName, c.LastName, COUNT(o.OrderID) AS TotalOrders
FROM Customers c
LEFT JOIN Orders o ON c.CustomerID = o.CustomerID
GROUP BY c.CustomerID, c.FirstName, c.LastName;

-- Query 3: List all restaurants offering "Italian" cuisine in "Mumbai"
SELECT Name FROM Restaurants WHERE CuisineType = 'Italian' AND City = 'Mumbai';

-- Query 4: Calculate the total revenue generated by each restaurant from completed orders
SELECT r.Name, SUM(o.OrderAmount) AS TotalRevenue
FROM Restaurants r
JOIN Orders o ON r.RestaurantID = o.RestaurantID
WHERE o.OrderStatus = 'Delivered'
GROUP BY r.Name;

-- Query 5: Retrieve the most recent order placed by each customer
SELECT c.FirstName, c.LastName, MAX(o.OrderDate) AS MostRecentOrder
FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID
GROUP BY c.CustomerID, c.FirstName, c.LastName;

-- Query 6: List customers who have not placed any orders yet
SELECT FirstName, LastName
FROM Customers
WHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM Orders);

-- Query 7: Identify the most reviewed restaurants
SELECT r.Name, COUNT(rev.ReviewID) AS TotalReviews
FROM Restaurants r
JOIN Reviews rev ON r.RestaurantID = rev.RestaurantID
GROUP BY r.Name
ORDER BY TotalReviews DESC;

-- Query 8: Find the most preferred payment method
SELECT PaymentMethod, COUNT(*) AS UsageCount
FROM Payments
GROUP BY PaymentMethod
ORDER BY UsageCount DESC;

-- Query 9: List the top 5 restaurants by total revenue
-- Query 9: List the top 5 restaurants by total revenue (SQL Server version)
WITH RestaurantRevenue AS (
    SELECT r.Name, SUM(o.OrderAmount) AS TotalRevenue
    FROM Restaurants r
    JOIN Orders o ON r.RestaurantID = o.RestaurantID
    WHERE o.OrderStatus = 'Delivered'
    GROUP BY r.Name
)
SELECT TOP 5 Name, TotalRevenue
FROM RestaurantRevenue
ORDER BY TotalRevenue DESC;


-- Query 10: Show the details of all cancelled orders along with the customer's and restaurant's names
SELECT o.OrderID, c.FirstName, c.LastName, r.Name AS RestaurantName, o.OrderAmount
FROM Orders o
JOIN Customers c ON o.CustomerID = c.CustomerID
JOIN Restaurants r ON o.RestaurantID = r.RestaurantID
WHERE o.OrderStatus = 'Cancelled';
